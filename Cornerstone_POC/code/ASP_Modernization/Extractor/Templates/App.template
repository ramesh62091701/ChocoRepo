import React, { useEffect } from "react";
import "style/style.less";
import { AppConstants } from "constants/AppConstants";
import { GetHomePageUrl } from "services/CommonAPIService";
$$ImportComponents$$
import { InfoIcon } from "@flare/primitives/icon";
import { ListboxItem } from "@flare/primitives/dropdown";
import { useLocalizationsDefaults } from "@flare/primitives/core-ui";
import { shallowEqual, useSelector, useDispatch } from "react-redux";
import "react-loading-skeleton/dist/skeleton.css";
import { Preloader } from "@flare/primitives/preloader";

interface ToastMessage {
    showToast: boolean;
    toastMessage: string;
}

// Todo: Define Properties.
interface Props {

}

const AppComponent: React.FC = (props: any): JSX.Element => {

    let prevUrl: any = "";
    let loId = "";

    const {
        location: { search },
    } = props;
    // Todo: Define state
    const [homePageUrl, setHomePageUrl] = React.useState<string>(
        AppConstants.BreadcrumbHomeDefaultPath
    );
    const [isBreadcrumbLoaded, setIsBreadcrumbLoaded] =
        React.useState<boolean>(false);
    const [isUserLoaded, setIsUserLoaded] = React.useState<boolean>(false);
    const [isMetaDataLoaded, setIsMetaDataLoaded] =
        React.useState<boolean>(false);
    const [currentPage, setcurrentPage] = React.useState(1);

    // Todo: Define localized strings.


    try {
        // eslint-disable-next-line compat/compat
        const up = new URLSearchParams(search);
        const qs: any = up.get("LoId");
        const qsBack: any = up.get("back");
        loId = qs;

        if (qsBack !== null && qsBack !== "") {
            prevUrl = qsBack;
            sessionStorage.setItem(`prevUrl_${loId}`, prevUrl);
        } else if (document.referrer !== null && document.referrer !== "") {
            prevUrl = document.referrer;
            sessionStorage.setItem(`prevUrl_${loId}`, prevUrl);
        } else if (sessionStorage.getItem(`prevUrl_${loId}`) !== null) {
            prevUrl = sessionStorage.getItem(`prevUrl_${loId}`)?.toString();
        }
    } catch (ex) {
        loId = "";
    }


    const url = AppConstants.BreadcrumbTrainingTitle.replace("{loId}", loId);

    useEffect(() => {
        GetHomePageUrl()
            .then((pageUrl: string) => {
                if (pageUrl !== "") {
                    setHomePageUrl(`/${pageUrl}`);
                }
                setIsBreadcrumbLoaded(true);
            })
            .catch(() => {
                setHomePageUrl(`/${AppConstants.BreadcrumbHomeDefaultPath}`);
                setIsBreadcrumbLoaded(true);
            });
    }, []);


    const submitHandler = (
        e: React.MouseEvent,
        buttonIdentifier: string
    ): any => {

    };

    return (
        <div>
            {isBreadcrumbLoaded && (
                $$Components$$
            )}
            <ToastMsg />
        </div>
    );
};

export default AppComponent;

