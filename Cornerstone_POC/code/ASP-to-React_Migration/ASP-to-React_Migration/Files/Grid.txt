/* istanbul ignore file */

import React, { useEffect } from "react";
import {
  DataGrid,
  DataGridColumnDef,
  DataGridRow,
} from "@flare/primitives/data-grid";
import "style/style.less";
import { useLocalizationsDefaults } from "@flare/primitives/core-ui";
import type { RowSelectionState } from "@tanstack/react-table";
import { ExtendedAssignTrainingCommon, UserGrid } from "localizations";
import { UserDetail, UserDetailsResponse } from "models/UserDetails";
import { fetchUserDetails } from "services/CommonAPIService";
import { UserFilters } from "models/UserFilters";
import { SessionReservationBreakdownItem } from "models/TrainingDetails";
import { OUSeatDetails } from "models/OUSeatDetails";
import { UserLoStatus } from "constants/UserLoStatus";
import UserGridToolBar from "./UserGridToolBar";

interface Props {
  selectedUsers: Record<number, UserDetail>;
  setSelectedUsers: (value: Record<number, UserDetail>) => void;
  loId: string;
  isRecurrenceEnabled: boolean;
  breakdown: SessionReservationBreakdownItem[];
  sessionGeneralSeatsAvailable: number;
  setSessionSeatAvailable: (value: boolean) => void;
  trainingType: string | undefined;
  setIsTrainingInProgress: (value: boolean) => void;
  setIsUserLoaded: (value: boolean) => void;
}

const isRTLdirection = document.dir === "rtl";

const UserGridContainer: React.FC<Props> = ({
  selectedUsers,
  setSelectedUsers,
  loId,
  isRecurrenceEnabled,
  breakdown,
  sessionGeneralSeatsAvailable,
  setSessionSeatAvailable,
  trainingType,
  setIsTrainingInProgress,
  setIsUserLoaded,
}): JSX.Element => {
  const tempData = React.useRef<UserDetail[]>([]);
  // const TOTAL_ROWS = 100;
  const localizedSelectUserTitle = useLocalizationsDefaults(
    `${ExtendedAssignTrainingCommon.SelectUserTitle}`
  );
  const localizedSelected = useLocalizationsDefaults(`${UserGrid.Selected}`);
  const localizedCounter = useLocalizationsDefaults(`${UserGrid.Counter}`);
  const localizedShowSelected = useLocalizationsDefaults(
    `${UserGrid.ShowSelected}`
  );
  const localizedEmployees = useLocalizationsDefaults(`${UserGrid.Employees}`);
  const localizedUserId = useLocalizationsDefaults(`${UserGrid.UserID}`);
  const localizedDivision = useLocalizationsDefaults(`${UserGrid.Division}`);
  const localizedPosition = useLocalizationsDefaults(`${UserGrid.Position}`);
  const localizedDirectManager = useLocalizationsDefaults(
    `${UserGrid.DirectManager}`
  );
  const localizedLocation = useLocalizationsDefaults(`${UserGrid.Location}`);
  const localizedAssignmentHistory = useLocalizationsDefaults(
    `${UserGrid.AssignmentHistory}`
  );
  const localizedCurrentStatus = useLocalizationsDefaults(
    `${UserGrid.CurrentStatus}`
  );
  const localizedLanguageEquivalency = useLocalizationsDefaults(
    `${UserGrid.LanguageEquivalency}`
  );
  const localizedCostCenter = useLocalizationsDefaults(
    `${UserGrid.CostCenter}`
  );
  // store pagination state in your own state
  const [pagination, setPagination] = React.useState({
    pageIndex: 0,
    pageSize: 25, // customize the default page size
  });

  const UserGridColumns: DataGridColumnDef<UserDetail>[] = [
    {
      accessorKey: "employeeName",
      header: localizedEmployees,
    },
    {
      accessorKey: "userRef",
      header: localizedUserId,
    },
    {
      accessorKey: "division",
      header: localizedDivision,
    },
    {
      accessorKey: "position",
      header: localizedPosition,
    },
    {
      accessorKey: "directManager",
      header: localizedDirectManager,
    },
    {
      accessorKey: "location",
      header: localizedLocation,
    },
    {
      accessorKey: "assignmentHistory",
      header: localizedAssignmentHistory,
    },
    {
      accessorKey: "currentStatus",
      header: localizedCurrentStatus,
    },
    {
      accessorKey: "languageEquivalency",
      header: localizedLanguageEquivalency,
    },
    {
      accessorKey: "costCenter",
      header: localizedCostCenter,
    },
  ];

  const [data1, setData1] = React.useState<UserDetail[]>([]);
  const [TotalRows, setTotalRows] = React.useState<number>(0);
  const [searchText, setSearchText] = React.useState<string>("");
  const [selectedUsersKey, setselectedUsersKey] =
    React.useState<Record<number, UserDetail>>(selectedUsers);
  const [columns, setColumns] =
    React.useState<DataGridColumnDef<UserDetail>[]>(UserGridColumns);
  const [rowSelection, setRowSelection] = React.useState<RowSelectionState>({});
  const [isDataLoaded, setIsDataLoaded] = React.useState<boolean>(false);
  const [showSelected, setShowSelected] = React.useState<boolean>(false);
  const [OUSeatAvailableDetails, setOUSeatAvailableDetails] = React.useState<
    Record<number, OUSeatDetails>
  >({});

  useEffect(() => {
    const t: RowSelectionState = {};
    Object.keys(selectedUsers).forEach((key) => {
      t[key] = true;
    });
    setRowSelection(t);

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  useEffect(() => {
    const OUTemp: Record<number, OUSeatDetails> = {};
    breakdown.forEach((OUDetails) => {
      OUTemp[OUDetails.ouId] = {
        OuId: OUDetails.ouId,
        SeatsAvailable: OUDetails.seatsAvailable,
        SelectedUsersForAssignment: 0,
        ReservedSeatsAvailable: OUDetails.reservedSeatsAvailable,
        GeneralSeatsAvailable: OUDetails.generalSeatsAvailable,
      };
    });
    OUTemp[0] = {
      OuId: 0,
      SeatsAvailable: sessionGeneralSeatsAvailable,
      SelectedUsersForAssignment: 0,
      ReservedSeatsAvailable: 0,
      GeneralSeatsAvailable: sessionGeneralSeatsAvailable,
    };
    setOUSeatAvailableDetails(OUTemp);
  }, [breakdown, sessionGeneralSeatsAvailable]);

  const getProfileImage = (gridData: any) => {
    const gridDatafinal = gridData.map((element: any, i: any) => {
      const firstName =
        element.firstName !== null && element.firstName.length > 0
          ? element.firstName
          : "";
      const lastName =
        element.lastName !== null && element.lastName.length > 0
          ? element.lastName
          : "";
      const dataToReturn = {
        ...element,
        employeeName: (
          <div className="profile-wrapper">
            <div className="profile-image-container">
              <div className="profile-image">
                <span
                  title={element.firstName !== null ? element.firstName : ""}
                >
                  {(firstName.length > 0 ? firstName[0] : "") +
                    (lastName.length > 0 ? lastName[0] : "")}
                </span>
              </div>
            </div>
            <div
              style={isRTLdirection ? { paddingRight: "12px" } : {}}
              title={`${firstName} ${lastName}`}
            >{`${firstName.substring(0, 15)}${
              firstName.length > 15 ? "..." : ""
            } ${lastName.substring(0, 15)}${
              lastName.length > 15 ? "..." : ""
            }`}</div>
          </div>
        ),
        position:
          element.position !== null && element.position.length > 30
            ? `${element.position.substring(0, 30)}...`
            : element.position,
        directManager:
          element.directManager !== null && element.directManager.length > 30
            ? `${element.directManager.substring(0, 30)}...`
            : element.directManager,
        division:
          element.division !== null && element.division.length > 30
            ? `${element.division.substring(0, 30)}...`
            : element.division,
        location:
          element.location !== null && element.location.length > 30
            ? `${element.location.substring(0, 30)}...`
            : element.location,
        costCenter:
          element.costCenter !== null && element.costCenter.length > 30
            ? `${element.costCenter.substring(0, 30)}...`
            : element.costCenter,
        languageEquivalency:
          element.languageEquivalency !== null &&
          element.languageEquivalency.length > 30
            ? `${element.languageEquivalency.substring(0, 30)}...`
            : element.languageEquivalency,
      };
      return dataToReturn;
    });
    return gridDatafinal;
  };
  const FetchUserDetails = React.useCallback(
    (userFilters: UserFilters) => {
      setData1([]);
      setIsDataLoaded(false);
      setIsUserLoaded(false);
      fetchUserDetails(loId, userFilters)
        .then((response: UserDetailsResponse) => {
          setIsUserLoaded(true);
          setIsDataLoaded(true);
          setTotalRows(response.totalCount);
          if (response.users !== null && response.users.length > 0) {
            tempData.current = response.users;
            const finalData = getProfileImage(response.users);
            setData1([...finalData]);
          } else {
            setData1([]);
            setTotalRows(0);
            tempData.current = [];
          }
        })
        .catch((error) => {
          setIsUserLoaded(true);
          setIsDataLoaded(true);
          setData1([]);
          setTotalRows(0);
          tempData.current = [];
        });
    },
    [loId, setIsUserLoaded]
  );
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter") {
      e.preventDefault();
      setPagination({ pageSize: pagination.pageSize, pageIndex: 0 });
      FetchUserDetails({
        searchText,
        pageSize: pagination.pageSize,
        pageIndex: pagination.pageIndex + 1,
      });
    }
  };
  const CapData = (users: UserDetail[]) => {
    const startIndex = pagination.pageIndex * pagination.pageSize;
    const endIndex = startIndex + pagination.pageSize;
    setData1(users.slice(startIndex, endIndex));
  };
  useEffect(() => {
    if (!showSelected) {
      FetchUserDetails({
        searchText,
        pageSize: pagination.pageSize,
        pageIndex: pagination.pageIndex + 1,
      });
    } else {
      const users = [...Object.values(selectedUsers)];
      setTotalRows(Object.keys(users).length);
      CapData(users);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [pagination.pageIndex, pagination.pageSize, FetchUserDetails]);

  const ToggleShowSelected = (selected: boolean) => {
    if (selected) {
      setShowSelected(true);
      const users = [...Object.values(selectedUsers)];
      setTotalRows(Object.keys(users).length);
      setPagination({ pageSize: pagination.pageSize, pageIndex: 0 });
      CapData(users);
      // setData1([...Object.values(selectedUsers)]);
    } else {
      setShowSelected(false);
      setPagination({ pageSize: pagination.pageSize, pageIndex: 0 });
      FetchUserDetails({
        searchText,
        pageSize: pagination.pageSize,
        pageIndex: 1,
      });
      // const finalData = getProfileImage(tempData.current);
      // setData1([...finalData]);
    }
  };
  const onChangeUserSelected = () => {
    const newStore: Record<number, UserDetail> = { ...selectedUsersKey };
    data1.forEach((user) => {
      if (!newStore[user.userId]) {
        if (Object.prototype.hasOwnProperty.call(rowSelection, user.userId)) {
          newStore[user.userId] = user;
        }
      } else if (
        !Object.prototype.hasOwnProperty.call(rowSelection, user.userId)
      ) {
        delete newStore[user.userId];
      }
    });
    return newStore;
  };

  const checkUserTrainingIsInProgress = (userStore: UserDetail[]) => {
    let isTrainingInProgress = false;
    userStore.some((user) => {
      isTrainingInProgress =
        user.currentStatusId === null
          ? false
          : UserLoStatus.InProgress.includes(user.currentStatusId);
      return isTrainingInProgress;
    });

    return isTrainingInProgress;
  };

  const checkSessionSeatAvaialability = (userStore: UserDetail[]) => {
    let localOUSeatAvailabilityDetails: Record<number, OUSeatDetails> = {
      ...OUSeatAvailableDetails,
    };

    let isSeatsAvailable = true;
    if (Object.keys(localOUSeatAvailabilityDetails).length > 0) {
      Object.entries(localOUSeatAvailabilityDetails).forEach(([key, value]) => {
        const keyId = parseInt(key, 10);
        localOUSeatAvailabilityDetails[keyId] = {
          ...value,
          SelectedUsersForAssignment: 0,
        };
      });

      userStore.some((user) => {
        isSeatsAvailable = false;
        let userOuIds = "0";
        if (user.ouIds !== null && user.ouIds !== "") {
          userOuIds = user.ouIds;
        }
        const ouIds = userOuIds.split(",");
        ouIds?.some((ou) => {
          const ouId = parseInt(ou, 10);
          const ouDetail = localOUSeatAvailabilityDetails[ouId];

          if (ouDetail.SeatsAvailable > 0) {
            const newOuStore: Record<number, OUSeatDetails> = {
              ...localOUSeatAvailabilityDetails,
            };
            ouDetail.SelectedUsersForAssignment += 1;
            ouDetail.SeatsAvailable -= 1;
            ouDetail.ReservedSeatsAvailable -= 1;
            isSeatsAvailable = true;
            newOuStore[ouId] = ouDetail;

            if (ouId === 0) {
              newOuStore[0].GeneralSeatsAvailable -= 1;
              Object.entries(newOuStore).forEach(([key, value]) => {
                const keyId = parseInt(key, 10);
                if (
                  keyId !== ouId &&
                  newOuStore[keyId].GeneralSeatsAvailable >
                    newOuStore[0].SeatsAvailable
                ) {
                  newOuStore[keyId].GeneralSeatsAvailable =
                    newOuStore[0].SeatsAvailable;
                  newOuStore[keyId].SeatsAvailable -= 1;
                }
              });
            } else if (ouDetail.ReservedSeatsAvailable < 0) {
              newOuStore[ouId].GeneralSeatsAvailable -= 1;
              newOuStore[0].SeatsAvailable -= 1;
              newOuStore[0].GeneralSeatsAvailable -= 1;
              Object.entries(newOuStore).forEach(([key, value]) => {
                const keyId = parseInt(key, 10);
                if (
                  keyId !== ouId &&
                  newOuStore[keyId].GeneralSeatsAvailable >
                    newOuStore[0].SeatsAvailable &&
                  keyId !== 0
                ) {
                  newOuStore[keyId].GeneralSeatsAvailable =
                    newOuStore[0].SeatsAvailable;
                  newOuStore[keyId].SeatsAvailable -= 1;
                }
              });
            }

            localOUSeatAvailabilityDetails = newOuStore;
            // return true;
          }
          return true;
        });

        if (!isSeatsAvailable) {
          return true;
        }
        return false;
      });
    }
    return isSeatsAvailable;
  };

  useEffect(() => {
    const store = onChangeUserSelected();
    if (trainingType === "session") {
      const isSeatsAvailable = checkSessionSeatAvaialability(
        Object.values(store)
      );
      setSessionSeatAvailable(isSeatsAvailable);
    }

    const isTrainingInProgress = checkUserTrainingIsInProgress(
      Object.values(store)
    );
    setIsTrainingInProgress(isTrainingInProgress);

    setselectedUsersKey(store);
    setSelectedUsers(store);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [rowSelection]);

  return (
    <div id="UserGridContainer">
      <DataGrid
        enableRowSelection={(row: DataGridRow<UserDetail>) =>
          isRecurrenceEnabled ||
          row.original.currentStatusId === null ||
          row.original.currentStatusId <= 0
        }
        manualPagination
        columns={columns}
        data={data1}
        getRowId={(orgRow: UserDetail) => `${orgRow.userId}`}
        renderTopToolbar={({ table }) => {
          return (
            <UserGridToolBar
              selectedRows={Object.keys(rowSelection).length}
              totalRows={TotalRows}
              toggleSwitch={ToggleShowSelected}
              setSearchText={setSearchText}
              handleKeyDown={handleKeyDown}
            />
          );
        }}
        rowCount={TotalRows}
        state={{ pagination, rowSelection, loading: !isDataLoaded }}
        onPaginationChange={setPagination}
        onRowSelectionChange={setRowSelection}
        enableSorting={false}
        enableColumnFilters={false}
        enableGlobalFilter={false}
        enableColumnActions={false}
        defaultColumn={{
          maxSize: 20,
          minSize: 10,
          size: 20,
        }}
      />
    </div>
  );
};

export default UserGridContainer;

